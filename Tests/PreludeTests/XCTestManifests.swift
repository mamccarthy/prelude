#if !canImport(ObjectiveC)
import XCTest

extension ChangeTrackingTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ChangeTrackingTests = [
        ("testApply1", testApply1),
        ("testApply2", testApply2),
        ("testApply3", testApply3),
        ("testApply4", testApply4),
        ("testFlatMapBothAreFalse", testFlatMapBothAreFalse),
        ("testFlatMapBothAreTrue", testFlatMapBothAreTrue),
        ("testFlatMapFirstIsTrue", testFlatMapFirstIsTrue),
        ("testFlatMapSecondIsTrue", testFlatMapSecondIsTrue),
        ("testFlatMapTransformsValueReturnsFalse", testFlatMapTransformsValueReturnsFalse),
        ("testFlatMapTransformsValueReturnsTrue", testFlatMapTransformsValueReturnsTrue),
        ("testHasChangedDefaultsToFalse", testHasChangedDefaultsToFalse),
        ("testLiftA", testLiftA),
        ("testMapMaps", testMapMaps),
        ("testMapPreservesHasChangedValue", testMapPreservesHasChangedValue),
        ("testMapSomeMaps", testMapSomeMaps),
        ("testMapSomePreservesHasChangedValue", testMapSomePreservesHasChangedValue),
        ("testPureFlagIsFalse", testPureFlagIsFalse),
        ("testWriteDoesChangeUnderlyingReferenceType", testWriteDoesChangeUnderlyingReferenceType),
        ("testWriteDoesNotChangeUnderlyingValueType", testWriteDoesNotChangeUnderlyingValueType),
        ("testWriteWithEquatableDoesNotWriteWhenValuesAreEqual", testWriteWithEquatableDoesNotWriteWhenValuesAreEqual),
        ("testWriteWithEquatableDoesNotWriteWhenValuesAreEqual_instanceMethod", testWriteWithEquatableDoesNotWriteWhenValuesAreEqual_instanceMethod),
        ("testWriteWithEquatableWritesWhenValuesAreNotEqual", testWriteWithEquatableWritesWhenValuesAreNotEqual),
        ("testWriteWithEquatableWritesWhenValuesAreNotEqual_instanceMethod", testWriteWithEquatableWritesWhenValuesAreNotEqual_instanceMethod),
        ("testWriteWithShouldChangeFunctionDoesNotWriteWhenItReturnsFalse", testWriteWithShouldChangeFunctionDoesNotWriteWhenItReturnsFalse),
        ("testWriteWithShouldChangeFunctionWritesWhenItReturnsTrue", testWriteWithShouldChangeFunctionWritesWhenItReturnsTrue),
    ]
}

extension ChangeTrackingTestsMonadLaws {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ChangeTrackingTestsMonadLaws = [
        ("testChangeableAssociativity", testChangeableAssociativity),
        ("testChangeableAssociativityBindOperator", testChangeableAssociativityBindOperator),
        ("testChangeableLeftIdentity", testChangeableLeftIdentity),
        ("testChangeableLeftIdentityBindOperator", testChangeableLeftIdentityBindOperator),
        ("testChangeableRightIdentity", testChangeableRightIdentity),
        ("testChangeableRightIdentityBindOperator", testChangeableRightIdentityBindOperator),
    ]
}

extension ComposeTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ComposeTests = [
        ("testDoubleThenIncrement", testDoubleThenIncrement),
        ("testIncrementDoubleSquare", testIncrementDoubleSquare),
        ("testIncrementThenDouble", testIncrementThenDouble),
        ("testPrecedenceWithPipe", testPrecedenceWithPipe),
        ("testSquareIncrementDouble", testSquareIncrementDouble),
    ]
}

extension MonoidTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__MonoidTests = [
        ("testOptionalConformance", testOptionalConformance),
    ]
}

extension PipeForwardTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__PipeForwardTests = [
        ("testDouble", testDouble),
        ("testString", testString),
    ]
}

extension PredicateTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__PredicateTests = [
        ("testIdentity", testIdentity),
        ("testIntersection", testIntersection),
        ("testInverse", testInverse),
        ("testPredicate", testPredicate),
        ("testPullback", testPullback),
        ("testSubtracting", testSubtracting),
        ("testSymmetricDifference", testSymmetricDifference),
        ("testUnion", testUnion),
    ]
}

extension ReducersTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ReducersTests = [
        ("testReducer_nextPartialResultConstruction_producesIdenticalResults", testReducer_nextPartialResultConstruction_producesIdenticalResults),
        ("testReducer_nextProducesIdenticalResults", testReducer_nextProducesIdenticalResults),
        ("testReducerFollowedBy", testReducerFollowedBy),
        ("testReducerFollowedByOperator", testReducerFollowedByOperator),
        ("testReducerPullback", testReducerPullback),
        ("testReducerSequenceExtensions", testReducerSequenceExtensions),
        ("testReducerUpdate", testReducerUpdate),
    ]
}

extension ReducersTestsMonoid {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ReducersTestsMonoid = [
        ("testLeftIdentity", testLeftIdentity),
        ("testRightIdentity", testRightIdentity),
    ]
}

extension ReducersTestsSemigroup {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ReducersTestsSemigroup = [
        ("testAssociativity3", testAssociativity3),
    ]
}

extension RefinementsTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__RefinementsTests = [
        ("testInitializeRefinedValue", testInitializeRefinedValue),
        ("testInitializeRefinedValueThrows", testInitializeRefinedValueThrows),
        ("testIntComparisonRefinements", testIntComparisonRefinements),
        ("testMakeSureEquatableThingsAreEquatable", testMakeSureEquatableThingsAreEquatable),
        ("testNarrow", testNarrow),
        ("testNonEmptyStringRefinement", testNonEmptyStringRefinement),
        ("testRefineMap", testRefineMap),
        ("testRefinementBoth_leftFunctionSucceeds", testRefinementBoth_leftFunctionSucceeds),
        ("testRefinementBoth_rightFunctionSucceeds", testRefinementBoth_rightFunctionSucceeds),
        ("testRefinementOfFunctionFails", testRefinementOfFunctionFails),
        ("testRefinementOfFunctionFails_both", testRefinementOfFunctionFails_both),
        ("testRefinementOfFunctionFails_not", testRefinementOfFunctionFails_not),
        ("testRefinementOfFunctionFails_oneOf", testRefinementOfFunctionFails_oneOf),
        ("testRefinementOfFunctionSucceeds", testRefinementOfFunctionSucceeds),
        ("testRefinementOfFunctionSucceeds_both", testRefinementOfFunctionSucceeds_both),
        ("testRefinementOfFunctionSucceeds_not", testRefinementOfFunctionSucceeds_not),
        ("testRefinementOfFunctionSucceeds_oneOf", testRefinementOfFunctionSucceeds_oneOf),
        ("testRefinementOneOf_bothFunctionFails", testRefinementOneOf_bothFunctionFails),
        ("testRefinementOneOf_bothFunctionSucceeds", testRefinementOneOf_bothFunctionSucceeds),
        ("testRefinementOneOf_leftFunctionFails", testRefinementOneOf_leftFunctionFails),
        ("testRefinementOneOf_leftFunctionSucceeds", testRefinementOneOf_leftFunctionSucceeds),
        ("testRefinementOneOf_rightFunctionFails", testRefinementOneOf_rightFunctionFails),
        ("testRefinementOneOf_rightFunctionSucceeds", testRefinementOneOf_rightFunctionSucceeds),
    ]
}

extension SequenceExtensionsTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SequenceExtensionsTests = [
        ("testInterspersed_doesntAlterAnEmptySequence", testInterspersed_doesntAlterAnEmptySequence),
        ("testInterspersed_doesntAlterASingletonSequence", testInterspersed_doesntAlterASingletonSequence),
        ("testInterspersed_fiveElements", testInterspersed_fiveElements),
    ]
}

public func __allTests() -> [XCTestCaseEntry] {
    return [
        testCase(ChangeTrackingTests.__allTests__ChangeTrackingTests),
        testCase(ChangeTrackingTestsMonadLaws.__allTests__ChangeTrackingTestsMonadLaws),
        testCase(ComposeTests.__allTests__ComposeTests),
        testCase(MonoidTests.__allTests__MonoidTests),
        testCase(PipeForwardTests.__allTests__PipeForwardTests),
        testCase(PredicateTests.__allTests__PredicateTests),
        testCase(ReducersTests.__allTests__ReducersTests),
        testCase(ReducersTestsMonoid.__allTests__ReducersTestsMonoid),
        testCase(ReducersTestsSemigroup.__allTests__ReducersTestsSemigroup),
        testCase(RefinementsTests.__allTests__RefinementsTests),
        testCase(SequenceExtensionsTests.__allTests__SequenceExtensionsTests),
    ]
}
#endif
